/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas.missedcalls;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Stream;
import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeEach;

class PhoneCallsTest {

    private PhoneCalls calls;

    @BeforeEach
    public void beforeEach() {
        calls = new PhoneCalls();
    }

    @Test
    public void addContact_contact() {
        Contact contact = new Contact("555 01 55");

        assertDoesNotThrow(() -> calls.addContact(contact));
    }

    @Test
    public void addContact_null() {
        assertThrows(NullPointerException.class, () -> calls.addContact(null));
    }

    @Test
    public void getContact_found() {
        Contact expected = new Contact("555 01 55");
        calls.addContact(expected);
        Contact actual = calls.getContact("555 01 55");

        assertSame(expected, actual);
    }

    @Test
    public void getContact_not_found() {
        Contact contact = new Contact("555 01 55");
        calls.addContact(contact);
        Contact actual = calls.getContact("555 01 56");

        assertNull(actual);
    }

    @ParameterizedTest
    @MethodSource("removeContactTestDataProvider")
    public void removeContact(String phone, boolean expected) {
        Contact contact = new Contact("555 01 55");
        calls.addContact(contact);
        boolean actual = calls.removeContact(phone);

        assertEquals(expected, actual);
    }

    private static Stream<Arguments> removeContactTestDataProvider() {
        return Stream.of(
            Arguments.of("555 01 55", true),
            Arguments.of("555 01 56", false)
        );
    }

    @Test
    public void addMissedCall_success () {
        assertDoesNotThrow(() -> calls.addMissedCall(LocalDateTime.of(2021, 4, 25, 23, 00), "555 01 55"));
    }

    @Test
    public void addMissedCall_null_time () {
        assertThrows(NullPointerException.class, () -> calls.addMissedCall(null, "555 01 55"));
    }

    @Test
    public void addMissedCall_null_phone () {
        assertDoesNotThrow(() -> calls.addMissedCall(LocalDateTime.of(2021, 4, 25, 23, 00), null));
    }

    @Test
    public void getMissedCallsIterator () {
        Contact contact = new Contact("555 01 55");
        calls.addContact(contact);
        calls.addMissedCall(LocalDateTime.of(2021, 4, 25, 23, 0), "555 01 55");
        calls.addMissedCall(LocalDateTime.of(2021, 4, 25, 23, 1), "555 01 56");
        calls.addMissedCall(LocalDateTime.of(2021, 4, 25, 23, 2), "555 01 57");

        Iterator<PhoneCalls.MissedCall> iterator = calls.getMissedCallsIterator();
        List<Executable> assertions = new ArrayList<>();
        assertions.add(() -> {
            PhoneCalls.MissedCall call = iterator.next();
            assertAll(
                () -> assertSame(contact, call.getContact()),
                () -> assertEquals("555 01 55", call.getPhone()),
                () -> assertEquals(LocalDateTime.of(2021, 4, 25, 23, 0), call.getTime())
            );
        });
        assertions.add(() -> {
            PhoneCalls.MissedCall call = iterator.next();
            assertAll(
                () -> assertNull(call.getContact()),
                () -> assertEquals("555 01 56", call.getPhone()),
                () -> assertEquals(LocalDateTime.of(2021, 4, 25, 23, 1), call.getTime())
            );
        });
        assertions.add(() -> {
            PhoneCalls.MissedCall call = iterator.next();
            assertAll(
                () -> assertNull(call.getContact()),
                () -> assertEquals("555 01 57", call.getPhone()),
                () -> assertEquals(LocalDateTime.of(2021, 4, 25, 23, 2), call.getTime())
            );
        });
        assertions.add(() -> assertFalse(iterator.hasNext()));

        assertAll(assertions);
    }
}
